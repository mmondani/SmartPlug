#include "mainwindow.h"
#include "ui_mainwindow.h"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    ui->pushOpen->setEnabled(true);
    ui->pushClose->setEnabled(false);

    portValidator = new QIntValidator(0, 65535, this);
    ui->lineUDPPort->setValidator(portValidator);
    ui->lineTCPPort->setValidator(portValidator);

    UDPSocket = new QUdpSocket(this);
    TCPSocket = new QTcpSocket(this);



    // Agregar comandos
    QStringList commands;
    commands << "GET" << "SET" << "RESET" << "NODE ON" << "NODE OFF";
    ui->comboCommand->addItems(commands);

    // Agregar registros
    QStringList registers;
    registers << "V_RMS" <<"I_RMS" << "POWER_FACTOR" << "FREQUENCY" << "ACTIVE_POWER" << "TOTAL_ENERGY" <<
                 "CURRENT_HOUR_ENERGY" << "CURRENT_MEASUREMENTS" << "DEVICE_ID" << "LOAD_STATE" << "SYNCH_TIME" << "DATE_TIME" <<
                 "MONDAY_LOAD_ON_TIME" << "MONDAY_LOAD_OFF_TIME" <<
                 "TUESDAY_LOAD_ON_TIME" << "TUESDAY_LOAD_OFF_TIME" <<
                 "WEDNESDAY_LOAD_ON_TIME" << "WEDNESDAY_LOAD_OFF_TIME" <<
                 "THURSDAY_LOAD_ON_TIME" << "THURSDAY_LOAD_OFF_TIME" <<
                 "FRIDAY_LOAD_ON_TIME" << "FRIDAY_LOAD_OFF_TIME" <<
                 "SATURDAY_LOAD_ON_TIME" << "SATURDAY_LOAD_OFF_TIME" <<
                 "SUNDAY_LOAD_ON_TIME" << "SUNDAY_LOAD_OFF_TIME" << "ENABLE_ONOFF_TIME" << "ONOFF_TIMES" <<
                 "PER_HOUR_ENERGY" << "PER_HOUR_ACIVE_POWER" << "ALL_REGISTERS";
    ui->comboRegister->addItems(registers);

    loadRegisterNameMap();


    connect(UDPSocket, SIGNAL(readyRead()), this, SLOT(readPendingUDPDatagram()));
    connect (ui->listConnected, SIGNAL(currentItemChanged(QListWidgetItem*,QListWidgetItem*)), this, SLOT(listItemChanged(QListWidgetItem*,QListWidgetItem*)));
    connect (&tcpComm, SIGNAL(newMsg(SmartPlugMsg_t)), this, SLOT(newSmartPlugMsgReceived(SmartPlugMsg_t)));
}

MainWindow::~MainWindow()
{
    delete ui;
}

QString MainWindow::getMACString(QByteArray MAC)
{
    QString strMAC;
    int m1 = MAC.at(0) & 0xFF;
    int m2 = MAC.at(1) & 0xFF;
    int m3 = MAC.at(2) & 0xFF;
    int m4 = MAC.at(3) & 0xFF;
    int m5 = MAC.at(4) & 0xFF;
    int m6 = MAC.at(5) & 0xFF;
    strMAC = QString("%1:%2:%3:%4:%5:%6").arg(MAC.at(0) & 0xFF, 2, 16, QChar('0')).
                                         arg(MAC.at(1) & 0xFF, 2, 16, QChar('0')).
                                         arg(MAC.at(2) & 0xFF, 2, 16, QChar('0')).
                                         arg(MAC.at(3) & 0xFF, 2, 16, QChar('0')).
                                         arg(MAC.at(4) & 0xFF, 2, 16, QChar('0')).
                                         arg(MAC.at(5) & 0xFF, 2, 16, QChar('0'));

    return strMAC;
}

void MainWindow::loadRegisterNameMap()
{
    registerNameMap["V_RMS"] = REG_V_RMS;
    registerNameMap["I_RMS"] = REG_I_RMS;
    registerNameMap["POWER_FACTOR"] = REG_POWER_FACTOR;
    registerNameMap["FREQUENCY"] = REG_FREQUENCY;
    registerNameMap["ACTIVE_POWER"] = REG_ACTIVE_POWER;
    registerNameMap["TOTAL_ENERGY"] = REG_TOTAL_ENERGY;
    registerNameMap["CURRENT_HOUR_ENERGY"] = REG_CURRENT_HOUR_ENERGY;
    registerNameMap["CURRENT_MEASUREMENTS"] = REG_CURRENT_MEASUREMENTS;
    registerNameMap["DEVICE_ID"] = REG_DEVICE_ID;
    registerNameMap["LOAD_STATE"] = REG_LOAD_STATE;
    registerNameMap["SYNCH_TIME"] = REG_SYNCH_TIME;
    registerNameMap["DATE_TIME"] = REG_DATE_TIME;
    registerNameMap["MONDAY_LOAD_ON_TIME"] = REG_MONDAY_LOAD_ON_TIME;
    registerNameMap["MONDAY_LOAD_OFF_TIME"] = REG_MONDAY_LOAD_OFF_TIME;
    registerNameMap["TUESDAY_LOAD_ON_TIME"] = REG_TUESDAY_LOAD_ON_TIME;
    registerNameMap["TUESDAY_LOAD_OFF_TIME"] = REG_TUESDAY_LOAD_OFF_TIME;
    registerNameMap["WEDNESDAY_LOAD_ON_TIME"] = REG_WEDNESDAY_LOAD_ON_TIME;
    registerNameMap["WEDNESDAY_LOAD_OFF_TIME"] = REG_WEDNESDAY_LOAD_OFF_TIME;
    registerNameMap["THURSDAY_LOAD_ON_TIME"] = REG_THURSDAY_LOAD_ON_TIME;
    registerNameMap["THURSDAY_LOAD_OFF_TIME"] = REG_THURSDAY_LOAD_OFF_TIME;
    registerNameMap["FRIDAY_LOAD_ON_TIME"] = REG_FRIDAY_LOAD_ON_TIME;
    registerNameMap["FRIDAY_LOAD_OFF_TIME"] = REG_FRIDAY_LOAD_OFF_TIME;
    registerNameMap["SATURDAY_LOAD_ON_TIME"] = REG_SATURDAY_LOAD_ON_TIME;
    registerNameMap["SATURDAY_LOAD_OFF_TIME"] = REG_SATURDAY_LOAD_OFF_TIME;
    registerNameMap["SUNDAY_LOAD_ON_TIME"] = REG_SUNDAY_LOAD_ON_TIME;
    registerNameMap["SUNDAY_LOAD_OFF_TIME"] = REG_SUNDAY_LOAD_OFF_TIME;
    registerNameMap["ENABLE_ONOFF_TIME"] = REG_ENABLE_ONOFF_TIME;
    registerNameMap["ONOFF_TIMES"] = REG_ONOFF_TIMES;
    registerNameMap["PER_HOUR_ENERGY"] = REG_PER_HOUR_ENERGY;
    registerNameMap["PER_HOUR_ACIVE_POWER"] = REG_PER_HOUR_ACTIVE_POWER;
    registerNameMap["ALL_REGISTERS"] = REG_ALL_REGISTERS;


    registerValueMap[REG_V_RMS] = "V_RMS";
    registerValueMap[REG_I_RMS] = "I_RMS";
    registerValueMap[REG_POWER_FACTOR] = "POWER_FACTOR";
    registerValueMap[REG_FREQUENCY] = "FREQUENCY";
    registerValueMap[REG_ACTIVE_POWER] = "ACTIVE_POWER";
    registerValueMap[REG_TOTAL_ENERGY] = "TOTAL_ENERGY";
    registerValueMap[REG_CURRENT_HOUR_ENERGY] = "CURRENT_HOUR_ENERGY";
    registerValueMap[REG_CURRENT_MEASUREMENTS] = "CURRENT_MEASUREMENTS";
    registerValueMap[REG_DEVICE_ID] = "DEVICE_ID";
    registerValueMap[REG_LOAD_STATE] = "LOAD_STATE";
    registerValueMap[REG_SYNCH_TIME] = "SYNCH_TIME";
    registerValueMap[REG_DATE_TIME] = "DATE_TIME";
    registerValueMap[REG_MONDAY_LOAD_ON_TIME] = "MONDAY_LOAD_ON_TIME";
    registerValueMap[REG_MONDAY_LOAD_OFF_TIME] = "MONDAY_LOAD_OFF_TIME";
    registerValueMap[REG_TUESDAY_LOAD_ON_TIME] = "TUESDAY_LOAD_ON_TIME";
    registerValueMap[REG_TUESDAY_LOAD_OFF_TIME] = "TUESDAY_LOAD_OFF_TIME";
    registerValueMap[REG_WEDNESDAY_LOAD_ON_TIME] = "WEDNESDAY_LOAD_ON_TIME";
    registerValueMap[REG_WEDNESDAY_LOAD_OFF_TIME] = "WEDNESDAY_LOAD_OFF_TIME";
    registerValueMap[REG_THURSDAY_LOAD_ON_TIME] = "THURSDAY_LOAD_ON_TIME";
    registerValueMap[REG_THURSDAY_LOAD_OFF_TIME] = "THURSDAY_LOAD_OFF_TIME";
    registerValueMap[REG_FRIDAY_LOAD_ON_TIME] = "FRIDAY_LOAD_ON_TIME";
    registerValueMap[REG_FRIDAY_LOAD_OFF_TIME] = "FRIDAY_LOAD_OFF_TIME";
    registerValueMap[REG_SATURDAY_LOAD_ON_TIME] = "SATURDAY_LOAD_ON_TIME";
    registerValueMap[REG_SATURDAY_LOAD_OFF_TIME] = "SATURDAY_LOAD_OFF_TIME";
    registerValueMap[REG_SUNDAY_LOAD_ON_TIME] = "SUNDAY_LOAD_ON_TIME";
    registerValueMap[REG_SUNDAY_LOAD_OFF_TIME] = "SUNDAY_LOAD_OFF_TIME";
    registerValueMap[REG_ENABLE_ONOFF_TIME] = "ENABLE_ONOFF_TIME";
    registerValueMap[REG_ONOFF_TIMES] = "ONOFF_TIMES";
    registerValueMap[REG_PER_HOUR_ENERGY] = "PER_HOUR_ENERGY";
    registerValueMap[REG_PER_HOUR_ACTIVE_POWER] = "PER_HOUR_ACIVE_POWER";
    registerValueMap[REG_ALL_REGISTERS] = "ALL_REGISTERS";
}


void MainWindow::readPendingUDPDatagram()
{
    QByteArray receivedData;
    QHostAddress sender;
    quint16 senderPort;
    int i;

    while (UDPSocket->hasPendingDatagrams())
    {
        UDPDatagram.resize(UDPSocket->pendingDatagramSize());

        UDPSocket->readDatagram(UDPDatagram.data(), UDPDatagram.size(), &sender, &senderPort);

        receivedData.append(UDPDatagram);
    }


    // Se obtienen los campos de interés de la trama
    bool ipv6 = (sender.protocol() == QAbstractSocket::IPv6Protocol)? true : false;
    QString ip;
    if (ipv6)
        ip = sender.toString().remove(0,7);
    else
        ip = sender.toString();

    QByteArray MACAddress = receivedData.mid(0,6);
    quint8 rssi = receivedData.mid(7,1).at(0);
    quint16 localPort = receivedData.mid(8,2).toInt();
    QString ID = QString(receivedData.mid(60,32));

    // Se busca en la lista de los dispositivos conectados previamente y si está se actualizan los datos.
    // En caso de no estar, se lo agrega.
    for (i = 0; i < ui->listConnected->count(); i++)
    {
        QListWidgetItem* item = ui->listConnected->item(i);

        // En UserRole se guarda un puntero a SmartPlugConnection
        SmartPlugConnection* value = item->data(Qt::UserRole).value<SmartPlugConnection*>();

        if (MACAddress == value->getMACAddress())
        {
            // Se encontró la MAC por lo que ya está en la lista. Se actualizan los datos.
            value->setRSSI(rssi);
            value->setLastTime(QDateTime::currentDateTime());
            value->setIPAddress(ip);

            // Si es el current item, actualizar la GUI
            if (ui->listConnected->currentItem() == item)
            {
                ui->labelRSSI->setText(QString::number(rssi));
                ui->labelIP->setText(value->getIPAddress());
                ui->labelLastTime->setText(value->getLastTime().toString("hh:mm:ss - dd/MM/yyyy"));
            }

            break;
        }
    }

    if (i >= ui->listConnected->count())
    {
        // No se encontró la MAC, se la agrega a la lista.
        SmartPlugConnection* newConn = new SmartPlugConnection ();
        newConn->setID(ID);
        newConn->setIPAddress(ip);
        newConn->setLastTime(QDateTime::currentDateTime());
        newConn->setMACAddress(MACAddress);
        newConn->setPort(localPort);
        newConn->setRSSI(rssi);

        QListWidgetItem* item = new QListWidgetItem(ID);
        item->setData(Qt::UserRole, QVariant::fromValue(newConn));
        ui->listConnected->addItem(item);
    }
}

void MainWindow::listItemChanged(QListWidgetItem *current, QListWidgetItem *previous)
{
    // Cuando se cambia el item seleccionado de la lista se actualiza la GUI.
    SmartPlugConnection* value = current->data(Qt::UserRole).value<SmartPlugConnection*>();

    ui->labelID->setText(value->getID());
    ui->labelPORT->setText(QString::number(value->getPort()));
    ui->labelMAC->setText(getMACString(value->getMACAddress()));
    ui->labelRSSI->setText(QString::number(value->getRSSI()));
    ui->labelIP->setText(value->getIPAddress());
    ui->labelLastTime->setText(value->getLastTime().toString("hh:mm:ss - dd/MM/yyyy"));
}

void MainWindow::on_pushOpen_clicked()
{
    ui->pushOpen->setEnabled(false);
    ui->pushClose->setEnabled(true);

    UDPSocket->bind(ui->lineUDPPort->text().toUInt());
}

void MainWindow::on_pushClose_clicked()
{
    ui->pushOpen->setEnabled(true);
    ui->pushClose->setEnabled(false);

    UDPSocket->close();
}



void MainWindow::on_pushSend_clicked()
{
    QString command = ui->comboCommand->currentText();
    QString reg = ui->comboRegister->currentText();
    QString payload = ui->linePayload->text();

    quint8 commandByte = 0xFF;
    quint8 regByte;
    QByteArray payloadBytes;
    QStringList payloadStrings;

    if (command == "SET")
    {
        if (reg == "DEVICE_ID")
        {
            commandByte = CMD_SET;
            regByte = REG_DEVICE_ID;
            payloadStrings = payload.split(" ", QString::SkipEmptyParts);

            // Siempre se envían 33 bytes.
            payloadBytes.resize(33);
            payloadBytes.fill('\0');
            for (int i = 0; i < payloadStrings.length(); i++)
            {
                if (i >= 32)
                    break;

                payloadBytes[i] = payloadStrings.at(i).at(0).toLatin1();
            }
        }
        else if (reg == "DATE_TIME")
        {
            commandByte = CMD_SET;
            regByte = REG_DATE_TIME;
            payloadStrings = payload.split(" ", QString::SkipEmptyParts);

            // Siempre se envían 6 bytes.
            payloadBytes.resize(6);
            payloadBytes.fill('\0');
            for (int i = 0; i < payloadStrings.length(); i++)
            {
                if (i >= 6)
                    break;

                char number = (char)(payloadStrings.at(i).toInt());
                payloadBytes.append(number);
            }
        }
        else if (reg.endsWith("TIME"))
        {
            commandByte = CMD_SET;
            regByte = registerNameMap[reg];
            payloadStrings = payload.split(" ", QString::SkipEmptyParts);
            for (int i = 0; i < payloadStrings.length(); i++)
            {
                if (i >= 2)
                    break;

                char number = (char)(payloadStrings.at(i).toInt());
                payloadBytes.append(number);
            }
        }
    }
    else if (command == "GET")
    {
        if (reg != "ALL_REGISTERS")
        {
            commandByte = CMD_GET;
            regByte = registerNameMap[reg];

            // En estos registros se agregan tres bytes en el payload para indicar la fecha
            // del bloque que se quiere recuperar: DIA MES AÑO (AÑO REAL - 2000)
            if (regByte == REG_PER_HOUR_ACTIVE_POWER || regByte == REG_PER_HOUR_ENERGY)
            {
                payloadStrings = payload.split(" ", QString::SkipEmptyParts);
                for (int i = 0; i < payloadStrings.length(); i++)
                {
                    if (i >= 3)
                        break;

                    char number = (char)(payloadStrings.at(i).toInt());
                    payloadBytes.append(number);
                }
            }
        }
    }
    else if (command == "NODE ON")
    {
        commandByte = CMD_NODE_ON;
    }
    else if (command == "NODE OFF")
    {
        commandByte = CMD_NODE_OFF;
    }
    else if (command == "RESET")
    {
        if (reg == "DEVICE_ID")
        {
            commandByte = CMD_RESET;
            regByte = REG_DEVICE_ID;
        }
        else if (reg.endsWith("TIME"))
        {
            commandByte = CMD_RESET;
            regByte = registerNameMap[reg];
        }
        else if (reg == "PER_HOUR_ENERGY")
        {
            commandByte = CMD_RESET;
            regByte = REG_PER_HOUR_ENERGY;
        }
        else if (reg == "PER_HOUR_ACIVE_POWER")
        {
            commandByte = CMD_RESET;
            regByte = REG_PER_HOUR_ACTIVE_POWER;
        }
        else if (reg == "ALL_REGISTERS")
        {
            commandByte = CMD_RESET;
            regByte = REG_ALL_REGISTERS;
        }
    }


    if (commandByte != 0xFF)
    {
        if (ui->listConnected->count() > 0)
        {
            QListWidgetItem* currentItem = ui->listConnected->currentItem();

            if (currentItem)
            {
                SmartPlugConnection* currentSmartPlugConnection = currentItem->data(Qt::UserRole).value<SmartPlugConnection*>();

                QByteArray data2Send = tcpComm.sendMsg(currentSmartPlugConnection->getIPAddress(), ui->lineTCPPort->text().toInt(),
                                commandByte, regByte, payloadBytes);

                //QByteArray data2Send = tcpComm.sendMsg("192.168.0.101", ui->lineTCPPort->text().toInt(),
                //                        commandByte, regByte, payloadBytes);

                QString data2SendStr;
                for (int i = 0; i < data2Send.length(); i++)
                {
                    data2SendStr.append(QString::number(data2Send.at(i), 16));
                    data2SendStr.append(" ");
                }
                ui->textSend->append(data2SendStr);
            }
        }
    }
}

void MainWindow::on_comboCommand_currentIndexChanged(const QString &command)
{
    if (command == "SET")
    {
        ui->linePayload->setEnabled(true);
        ui->comboRegister->setEnabled(true);
    }
    else if (command == "GET")
    {
        if (ui->comboRegister->currentText() == "PER_HOUR_ENERGY" || ui->comboRegister->currentText() == "PER_HOUR_ACIVE_POWER")
        {
            // Al hacer un GET de estos dos registros se deben enviar 3 bytes con el DIA MES y AÑO que se quiere recuperar.
            ui->linePayload->setEnabled(true);
            ui->comboRegister->setEnabled(true);
        }
        else
        {
            ui->linePayload->setEnabled(false);
            ui->comboRegister->setEnabled(true);
        }
    }
    else if (command == "RESET")
    {
        ui->linePayload->setEnabled(false);
        ui->comboRegister->setEnabled(true);
    }
    else if (command == "NODE ON" || command == "NODE OFF")
    {
        ui->linePayload->setEnabled(false);
        ui->comboRegister->setEnabled(false);
    }

}

void MainWindow::on_comboRegister_currentIndexChanged(const QString &reg)
{
    if (ui->comboCommand->currentText() == "GET")
    {
        if (reg == "PER_HOUR_ENERGY" || reg == "PER_HOUR_ACIVE_POWER")
        {
            // Al hacer un GET de estos dos registros se deben enviar 3 bytes con el DIA MES y AÑO que se quiere recuperar.
            ui->linePayload->setEnabled(true);
            ui->comboRegister->setEnabled(true);
        }
        else
        {
            ui->linePayload->setEnabled(false);
            ui->comboRegister->setEnabled(true);
        }
    }
}

void MainWindow::newSmartPlugMsgReceived(SmartPlugMsg_t msg)
{
    QString regStr;
    QString commandStr;
    QString payloadStr;
    QString frameRaw;


    if (msg.command != CMD_RESP_NODE_ON && msg.command != CMD_RESP_NODE_OFF)
        regStr = registerValueMap[msg.reg];


    // Se parsea la trama recibida en función del comando
    if (msg.command == CMD_RESP_GET)
    {
        commandStr = "GET";

        // Se parsea el payload de acuerdo al registro que se leyó.
        if (msg.reg == REG_V_RMS || msg.reg == REG_I_RMS || msg.reg == REG_POWER_FACTOR ||
                msg.reg == REG_FREQUENCY || msg.reg == REG_ACTIVE_POWER || msg.reg == REG_TOTAL_ENERGY ||
                msg.reg == REG_CURRENT_HOUR_ENERGY)
        {
            // El payload deben ser 4 bytes de un float
            if (msg.len < 4)
                payloadStr = "Error";
            else
            {
                payloadStr = QString::number(hexToFloat(msg.rawData.mid(0, 4)));
            }
        }
        else if (msg.reg == REG_CURRENT_MEASUREMENTS)
        {
            // Son 16 bytes que representan 4 valores float: tensión, corriente, potencia activa y energía total acumulada.
            if (msg.len < 16)
                payloadStr = "Error";
            else
            {
                payloadStr = "Tensión: " + QString::number(hexToFloat(msg.rawData.mid(0, 4))) + " ";
                payloadStr += "Corriente: " + QString::number(hexToFloat(msg.rawData.mid(4, 4))) + " ";
                payloadStr += "Potencia: " + QString::number(hexToFloat(msg.rawData.mid(8, 4))) + " ";
                payloadStr += "Energía total: " + QString::number(hexToFloat(msg.rawData.mid(12, 4)));
            }
        }
        else if (msg.reg == REG_DEVICE_ID)
        {
            // Es un string                           
            payloadStr = QString (msg.rawData.mid(0,32));
        }
        else if (msg.reg == REG_MONDAY_LOAD_ON_TIME ||msg.reg == REG_MONDAY_LOAD_OFF_TIME ||
                 msg.reg == REG_TUESDAY_LOAD_ON_TIME || msg.reg == REG_TUESDAY_LOAD_OFF_TIME ||
                 msg.reg == REG_WEDNESDAY_LOAD_ON_TIME || msg.reg == REG_WEDNESDAY_LOAD_OFF_TIME ||
                 msg.reg == REG_THURSDAY_LOAD_ON_TIME || msg.reg == REG_THURSDAY_LOAD_OFF_TIME ||
                 msg.reg == REG_FRIDAY_LOAD_ON_TIME || msg.reg == REG_FRIDAY_LOAD_OFF_TIME ||
                 msg.reg == REG_SATURDAY_LOAD_ON_TIME || msg.reg == REG_SATURDAY_LOAD_OFF_TIME ||
                 msg.reg == REG_SUNDAY_LOAD_ON_TIME || msg.reg == REG_SUNDAY_LOAD_OFF_TIME)
        {
            // Son dos bytes que indican HORAS y MINUTOS
            if (msg.len < 2)
                payloadStr = "Error";
            else
                payloadStr = QString::number(msg.rawData.at(0)) + ":" + QString::number(msg.rawData.at(1));
        }
        else if (msg.reg == REG_ENABLE_ONOFF_TIME)
        {
            // Es un byte que indica, con cada bit, si está habilitada la programación horaria o no.
            // Bit 0 = Domingo, Bit 6 = Sábado.
            if (msg.len < 1)
                payloadStr = "Error";
            else
                payloadStr = QString::number((unsigned int)msg.rawData.at(0), 2);
        }
        else if (msg.reg == REG_ONOFF_TIMES)
        {
            // Son 29 bytes que corresponden a las 7 horas de encendido y 7 horas de apagado
            // de los 7 días de la semana, empezando por el Lunes.
            // El  último byte es el de ENABLE_ONOFF_TIME.
            if (msg.len < 29)
                payloadStr = "Error";
            else
            {
                payloadStr.clear();

                for (int i = 0; i < 14; i++)
                {
                    payloadStr += (QString::number(msg.rawData.at(2*i)) + ":" + QString::number(msg.rawData.at(2*i+1)) + " ");
                }

                payloadStr += " Habilitados: " + QString::number((unsigned int)msg.rawData.at(28), 2);;
            }
        }
        else if (msg.reg == REG_LOAD_STATE)
        {
            // Es un byte que indica si está encendida o no
            if (msg.len < 1)
                payloadStr = "Error";
            else
            {
                if (msg.rawData.at(0) == 0)
                    payloadStr = "Load OFF";
                else
                    payloadStr = "Load ON";
            }
        }
        else if (msg.reg == REG_SYNCH_TIME)
        {
            // Es un byte que indica si está sincronizado el RTC o no
            if (msg.len < 1)
                payloadStr = "Error";
            else
            {
                if (msg.rawData.at(0) == 1)
                    payloadStr = "RTC synch";
                else
                    payloadStr = "RTC NO synch";
            }
        }
        else if (msg.reg == REG_PER_HOUR_ACTIVE_POWER || msg.reg == REG_PER_HOUR_ENERGY)
        {
            // Son 3 bytes de la fecha y 24 valores float (tiene que haber 99 bytes)
            if (msg.len < 99)
                payloadStr = "Error";
            else
            {
                payloadStr.append("Fecha: " + QString("%1/%2/%3").arg((int)msg.rawData.at(0)).arg((int)msg.rawData.at(1)).arg((int)msg.rawData.at(2)) + " - ");

                for (int i = 3; i < msg.rawData.length(); i = i+4)
                {
                    // Agarra de a 4 bytes y los convierte a float.
                    // Los 4 bytes de cada float vienen al reves!!!!!
                    QByteArray floatBytes = msg.rawData.mid(i, 4);
                    std::reverse(floatBytes.begin(), floatBytes.end());
                    float number = hexToFloat(floatBytes);

                    if (number >= 0.01)
                        payloadStr.append(QString::number(number) + "; ");
                    else
                        payloadStr.append(QString("0.0") + QString("; "));
                }
            }
        }
    }
    else if (msg.command == CMD_RESP_SET)
    {
        commandStr = "SET";
    }
    else if (msg.command == CMD_RESP_RESET)
    {
        commandStr = "RESET";
    }
    else if (msg.command == CMD_RESP_NODE_ON)
    {
        commandStr = "NODE ON";
    }
    else if (msg.command == CMD_RESP_NODE_OFF)
    {
        commandStr = "NODE OFF";
    }


    // Se obtiene la trama en formato hexadecimal
    frameRaw.append(QString::number(msg.command, 16) + " ");

    if (!regStr.isEmpty())
        frameRaw.append(QString::number(msg.reg, 16) + " ");

    for (int i = 0; i < msg.rawData.length(); i++)
        frameRaw.append(QString::number(msg.rawData.at(i), 16).right(2) + " ");



    // Se arma el string para mostrar en la GUI.
    QString frameParsed = commandStr;

    if (!regStr.isEmpty())
        frameParsed.append(" : " + regStr);

    if (!payloadStr.isEmpty())
        frameParsed.append("   " + payloadStr);

    frameParsed.append(" ( " + frameRaw + " )");

    ui->textReceived->append(frameParsed);


    // Se cierra la conexión TCP
    tcpComm.closeConn();
}



float MainWindow::hexToFloat(const QByteArray &_array)

{
    bool ok;
    int sign = 1;
    QByteArray array(_array.toHex());
    array = QByteArray::number(array.toLongLong(&ok,16),2); //convert hex to binary
    if(array.length()==32)
    {
        if(array.at(0)=='1') sign =-1; // if bit 0 is 1 number is negative
            array.remove(0,1); // remove sign bit
    }
    QByteArray fraction =array.right(23); //get the fractional part
    double mantissa = 0;
    for(int i=0;i<fraction.length();i++) // iterate through the array to claculate the fraction as a decimal.
        if(fraction.at(i)=='1') mantissa += 1.0/(pow(2,i+1));
            int exponent = array.left(array.length()-23).toLongLong(&ok,2)-127; //claculate the exponent


    return (sign*pow(2,exponent)*(mantissa+1.0));
}
